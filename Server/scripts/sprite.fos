// Author: cvet
// Used in client

#ifndef _SPRITE_
#define _SPRITE_

#include "_client_defines.fos"

shared class Sprite
{
    void Load( string& name, int path )
    {
        if( name.length() > 0 )
            Id = LoadSprite( name, path );
        else
            Id = 0;
        LoadedNameHash = uint( -1 );
        RefreshData();
    }

    void Load( uint nameHash )
    {
        if( nameHash == LoadedNameHash )
            return;
        LoadedNameHash = nameHash;

        Id = LoadSprite( nameHash );
        RefreshData();
    }

    void LoadByIni( string& iniKey, int path )
    {
        string@ name = GetIfaceIniStr( iniKey );
        if( @name != null && name.length() > 0 )
            Id = LoadSprite( name, path );
        else
            Id = 0;
        LoadedNameHash = uint( -1 );
        RefreshData();
    }

    void Draw( int x, int y, int w = 0, int h = 0 )
    {
        if( Id == 0 || Hidden )
            return;

        if( w == 0 )
            w = Width;
        if( h == 0 )
            h = Height;

        if( AnimPlay )
        {
            uint ticksPerFrame = Ticks / FrmCount;
            int  framesPassed = ( GetTick() - AnimStartTick ) / ticksPerFrame;
            if( framesPassed > 0 )
            {
                AnimStartTick += framesPassed * ticksPerFrame;
                Frame += ( AnimReverse ? -framesPassed : framesPassed );

                bool endAnim = false;
                if( Frame <= 0 )
                {
                    endAnim = true;
                    AnimStartTick -= -Frame * ticksPerFrame;
                    Frame = 0;
                }
                else if( Frame >= int(FrmCount) - 1 )
                {
                    endAnim = true;
                    AnimStartTick -= ( Frame + 1 - FrmCount ) * ticksPerFrame;
                    Frame = FrmCount - 1;
                }

                if( endAnim )
                {
                    if( AnimLoop )
                        Frame = ( AnimReverse ? int(FrmCount) - 1 : 0 );
                    else
                        AnimPlay = false;
                }
            }
        }

        switch( Layout )
        {
        case IMAGE_LAYOUT_TILE:
            DrawSpritePattern( Id, Frame, x, y, w, h, Width, Height );
            break;
        case IMAGE_LAYOUT_CENTER:
            DrawSprite( Id, Frame, x + w / 2 - Width / 2, y + h / 2 - Height / 2 );
            break;
        case IMAGE_LAYOUT_STRETCH:
            DrawSprite( Id, Frame, x, y, w, h );
            break;
        case IMAGE_LAYOUT_ZOOM:
            DrawSprite( Id, Frame, x, y, w, h, true );
            break;
        default:
            DrawSprite( Id, Frame, x, y );
            break;
        }
    }

    void SetFrame( int index )
    {
        Frame = index;
        AnimPlay = false;
    }

    void SetFirstFrame()
    {
        SetFrame( 0 );
    }

    void SetLastFrame()
    {
        SetFrame( int(FrmCount) - 1 );
    }

    void PlayAnimation( bool loop = true, bool reverse = false )
    {
        if( Id == 0 )
            return;
        if( AnimPlay && AnimLoop == loop && AnimReverse == reverse )
            return;

        AnimPlay = true;
        AnimLoop = loop;
        AnimReverse = reverse;
        AnimStartTick = GetTick();
    }

    private void RefreshData()
    {
        if( Id != 0 )
        {
            Width = GetSpriteWidth( Id, 0 );
            Height = GetSpriteHeight( Id, 0 );
            FrmCount = GetSpriteCount( Id );
            Ticks = GetSpriteTicks( Id );
        }
        else
        {
            Width = 0;
            Height = 0;
            FrmCount = 0;
            Ticks = 0;
        }
    }

    uint Id;
    int  Frame = -1;
    int  Layout = IMAGE_LAYOUT_NONE;
    int  Width;
    int  Height;
    uint FrmCount;
    uint Ticks;
    bool AnimPlay;
    bool AnimLoop;
    bool AnimReverse;
    uint AnimStartTick;
    bool Hidden;
    uint LoadedNameHash;
}

#endif // _SPRITE_
